#!/usr/bin/bash

bold=`tput bold`
underline=`tput smul`
stop_underline=`tput rmul`
reset=`tput sgr0`

echo "This is the git ${bold}merge${reset} command."

# The command's name
echo -e 'git merge'

# the command's description
echo "description here"

echo "------------"

# the command's syntax
echo "Syntax:"
echo "git merge [OPTIONS]..."
echo "git merge <msg> HEAD <commit>..."
echo "git merge --abort"
echo -e "\t--commit"
echo -e "\t--no-commit"
echo -e "\tPerform the merge and commit the result. This option can be used to override --no-commit."
echo -e "\t"
echo -e "\tWith --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance to inspect and further tweak the merge result before committing."
echo -e "\t"
echo -e "\t--edit"
echo -e "\t-e"
echo -e "\t--no-edit"
echo -e "\tInvoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged). The --edit (or -e) option is still useful if you are giving a draft message with the -m option from the command line and want to edit it in the editor."
echo -e "\t"
echo -e "\tOlder scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run git merge. To make it easier to adjust such scripts to the updated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be set to no at the beginning of them."
echo -e "\t"
echo -e "\t--ff"
echo -e "\tWhen the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This is the default behavior."
echo -e "\t"
echo -e "\t--no-ff"
echo -e "\tCreate a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging an annotated (and possibly signed) tag."
echo -e "\t"
echo -e "\t--ff-only"
echo -e "\tRefuse to merge and exit with a non-zero status unless the current HEAD is already up-to-date or the merge can be resolved as a fast-forward."
echo -e "\t"
echo -e "\t--log[=<n>]"
echo -e "\t--no-log"
echo -e "\tIn addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits that are being merged. See also git-fmt-merge-msg[1]."
echo -e "\t"
echo -e "\tWith --no-log do not list one-line descriptions from the actual commits being merged."
echo -e "\t"
echo -e "\t--stat"
echo -e "\t-n"
echo -e "\t--no-stat"
echo -e "\tShow a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat."
echo -e "\t"
echo -e "\tWith -n or --no-stat do not show a diffstat at the end of the merge."
echo -e "\t"
echo -e "\t--squash"
echo -e "\t--no-squash"
echo -e "\tProduce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus)."
echo -e "\t"
echo -e "\tWith --no-squash perform the merge and commit the result. This option can be used to override --squash."
echo -e "\t"
echo -e "\t-s <strategy>"
echo -e "\t--strategy=<strategy>"
echo -e "\tUse the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead (git merge-recursive when merging a single head, git merge-octopus otherwise)."
echo -e "\t"
echo -e "\t-X <option>"
echo -e "\t--strategy-option=<option>"
echo -e "\tPass merge strategy specific option through to the merge strategy."
echo -e "\t"
echo -e "\t--verify-signatures"
echo -e "\t--no-verify-signatures"
echo -e "\tVerify that the commits being merged have good and trusted GPG signatures and abort the merge in case they do not."
echo -e "\t"
echo -e "\t--summary"
echo -e "\t--no-summary"
echo -e "\tSynonyms to --stat and --no-stat; these are deprecated and will be removed in the future."
echo -e "\t"
echo -e "\t-q"
echo -e "\t--quiet"
echo -e "\tOperate quietly. Implies --no-progress."
echo -e "\t"
echo -e "\t-v"
echo -e "\t--verbose"
echo -e "\tBe verbose."
echo -e "\t"
echo -e "\t--progress"
echo -e "\t--no-progress"
echo -e "\tTurn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting."
echo -e "\t"
echo -e "\t-S[<keyid>]"
echo -e "\t--gpg-sign[=<keyid>]"
echo -e "\tGPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space."
echo -e "\t"
echo -e "\t-m <msg>"
echo -e "\tSet the commit message to be used for the merge commit (in case one is created)."
echo -e "\t"
echo -e "\tIf --log is specified, a shortlog of the commits being merged will be appended to the specified message."
echo -e "\t"
echo -e "\tThe git fmt-merge-msg command can be used to give a good default for automated git merge invocations. The automated message can include the branch description."
echo -e "\t"
echo -e "\t--[no-]rerere-autoupdate"
echo -e "\tAllow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
echo -e "\t"
echo -e "\t--abort"
echo -e "\tAbort the current conflict resolution process, and try to reconstruct the pre-merge state."
echo -e "\t"
echo -e "\tIf there were uncommitted worktree changes present when the merge started, git merge --abort will in some cases be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes before running git merge."
echo -e "\t"
echo -e "\tgit merge --abort is equivalent to git reset --merge when MERGE_HEAD is present."
echo -e "\t"
echo -e "\t<commit>…​"
echo -e "\tCommits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a merge with more than two parents (affectionately called an Octopus merge)."
echo -e "\t"
echo -e "\tIf no commit is given from the command line, merge the remote-tracking branches that the current branch is configured to use as its upstream. See also the configuration section of this manual page."
echo -e "\t"
echo -e "\tWhen FETCH_HEAD (and no other commit) is specified, the branches recorded in the .git/FETCH_HEAD file by the previous invocation of git fetch for merging are merged to the current branch."


echo "------------"

# the command's usage examples
# example 1
echo "git test"
echo description here

# example 2
echo "git test something"
echo description here


exit 0
