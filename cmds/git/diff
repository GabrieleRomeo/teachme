#!/usr/bin/bash

bold=$(tput bold)
underline=$(tput smul)
stop_underline=$(tput rmul)
reset=$(tput sgr0)

echo "This is the git ${bold}diff${reset} command."

# The command's name
echo -e 'git diff'

# the command's description
echo "By default, used to show the differences between the working tree and the index. It can also be used to show differences between two files or two trees."

echo "------------"

# the command's syntax
echo "Syntax:"
echo "${bold}diff [OPTION]...${reset}"
echo -e "\t-${bold}-s, --no-patch:${reset} \t suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch"			
echo -e "\t-${bold}-U, --unified:${reset} \t generate diffs with <n> lines of context instead of the usual three"			
echo -e "\t-${bold}-a, --text:${reset} \t treat all files as text"			
echo -e "\t-${bold}-w, --ignore-all-space:${reset} \t Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none"			
echo -e "\t-${bold}-W, --function-context:${reset} \t show whole surrounding functions of changes"			
echo -e "\t-${bold}--help:${reset} \t display this help and exit"					
echo -e "\t-${bold}--version:${reset} \t output version information and exit"	

echo "------------"

# the command's usage examples
# example 1
echo "git diff HEAD^ HEAD <file>"
echo -e "It shows the differences for the file <${bold}file${reset}> between now and one commit back. The special character ${bold}^${reset} is used for specify the number of commit back (you can use also this notation ~1)"

# example 2
echo "git diff hotfix:cmds/command1.sh hotfix~1:cmds/command1.sh"
echo -e "Same as the previous example but, now, it shows the differences for the file located on a specific branch. \nThe general pattern to use is <${bold}branchname${reset}>:<${bold}file${reset}> <${bold}branchname${reset}>${bold}~1${reset}:<${bold}file${reset}> and the number of commits back is specified just after the ${bold}~${reset} character"


exit 0
