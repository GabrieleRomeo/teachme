#!/usr/bin/bash

bold=`tput bold`
underline=`tput smul`
stop_underline=`tput rmul`
reset=`tput sgr0`

echo "This is the git ${bold}rebase${reset} command."

# The command's name
echo -e 'git rebase'

# the command's description
echo "Used to take all the changes that were committed on one branch and replay them on another one. In practice, it moves a specific branch onto a new 'base' commit. This allows to have a more linear history."

echo "------------"

# the command's syntax
echo "Syntax:"
echo "${bold}git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>] [<upstream> [<branch>]]${reset}"	
echo "${bold}git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]	--root [<branch>]${reset}"	
echo "${bold}git rebase --continue | --skip | --abort | --edit-todo${reset}"	
echo -e "\t${bold}--onto <newbase>:${reset} \t Starting point at which to create the new commits. If the --onto option is not specified, the starting point is <upstream>. May be any valid commit, and not just an existing branch name."			
echo -e "\t${bold}<upstream>:${reset} \t Upstream branch to compare against. May be any valid commit, not just an existing branch name. Defaults to the configured upstream for the current branch."			
echo -e "\t${bold}<branch>:${reset} \t Working branch; defaults to HEAD."			

echo "------------"

# the command's usage examples
# example 1
echo "git test"
echo description here

# example 2
echo "git test something"
echo description here


exit 0
