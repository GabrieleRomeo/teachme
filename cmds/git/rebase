#!/usr/bin/bash

bold=`tput bold`
underline=`tput smul`
stop_underline=`tput rmul`
reset=`tput sgr0`

echo "This is the git ${bold}rebase${reset} command."

# The command's name
echo -e 'git rebase'

# the command's description
echo "description here"

echo "------------"

# the command's syntax
echo "Syntax:"
echo "git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>] [<upstream> [<branch>]]"
echo "git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]	--root [<branch>]"
echo "git rebase --continue | --skip | --abort | --edit-todo"
echo -e "\t--onto <newbase>"
echo -e "\tStarting point at which to create the new commits. If the --onto option is not specified, the starting point is <upstream>. May be any valid commit, and not just an existing branch name."
echo -e "\t"
echo -e "\tAs a special case, you may use "A...B" as a shortcut for the merge base of A and B if there is exactly one merge base. You can leave out at most one of A and B, in which case it defaults to HEAD."
echo -e "\t"
echo -e "\t<upstream>"
echo -e "\tUpstream branch to compare against. May be any valid commit, not just an existing branch name. Defaults to the configured upstream for the current branch."
echo -e "\t"
echo -e "\t<branch>"
echo -e "\tWorking branch; defaults to HEAD."
echo -e "\t"
echo -e "\t--continue"
echo -e "\tRestart the rebasing process after having resolved a merge conflict."
echo -e "\t"
echo -e "\t--abort"
echo -e "\tAbort the rebase operation and reset HEAD to the original branch. If <branch> was provided when the rebase operation was started, then HEAD will be reset to <branch>. Otherwise HEAD will be reset to where it was when the rebase operation was started."
echo -e "\t"
echo -e "\t--keep-empty"
echo -e "\tKeep the commits that do not change anything from its parents in the result."
echo -e "\t"
echo -e "\t--skip"
echo -e "\tRestart the rebasing process by skipping the current patch."
echo -e "\t"
echo -e "\t--edit-todo"
echo -e "\tEdit the todo list during an interactive rebase."
echo -e "\t"
echo -e "\t-m"
echo -e "\t--merge"
echo -e "\tUse merging strategies to rebase. When the recursive (default) merge strategy is used, this allows rebase to be aware of renames on the upstream side."
echo -e "\t"
echo -e "\tNote that a rebase merge works by replaying each commit from the working branch on top of the <upstream> branch. Because of this, when a merge conflict happens, the side reported as ours is the so-far rebased series, starting with <upstream>, and theirs is the working branch. In other words, the sides are swapped."
echo -e "\t"
echo -e "\t-s <strategy>"
echo -e "\t--strategy=<strategy>"
echo -e "\tUse the given merge strategy. If there is no -s option git merge-recursive is used instead. This implies --merge."
echo -e "\t"
echo -e "\tBecause git rebase replays each commit from the working branch on top of the <upstream> branch using the given strategy, using the ours strategy simply discards all patches from the <branch>, which makes little sense."
echo -e "\t"
echo -e "\t-X <strategy-option>"
echo -e "\t--strategy-option=<strategy-option>"
echo -e "\tPass the <strategy-option> through to the merge strategy. This implies --merge and, if no strategy has been specified, -s recursive. Note the reversal of ours and theirs as noted above for the -m option."
echo -e "\t"
echo -e "\t-S[<keyid>]"
echo -e "\t--gpg-sign[=<keyid>]"
echo -e "\tGPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space."
echo -e "\t"
echo -e "\t-q"
echo -e "\t--quiet"
echo -e "\tBe quiet. Implies --no-stat."
echo -e "\t"
echo -e "\t-v"
echo -e "\t--verbose"
echo -e "\tBe verbose. Implies --stat."
echo -e "\t"
echo -e "\t--stat"
echo -e "\tShow a diffstat of what changed upstream since the last rebase. The diffstat is also controlled by the configuration option rebase.stat."
echo -e "\t"
echo -e "\t-n"
echo -e "\t--no-stat"
echo -e "\tDo not show a diffstat as part of the rebase process."
echo -e "\t"
echo -e "\t--no-verify"
echo -e "\tThis option bypasses the pre-rebase hook. See also githooks[5]."
echo -e "\t"
echo -e "\t--verify"
echo -e "\tAllows the pre-rebase hook to run, which is the default. This option can be used to override --no-verify. See also githooks[5]."
echo -e "\t"
echo -e "\t-C<n>"
echo -e "\tEnsure at least <n> lines of surrounding context match before and after each change. When fewer lines of surrounding context exist they all must match. By default no context is ever ignored."
echo -e "\t"
echo -e "\t-f"
echo -e "\t--force-rebase"
echo -e "\tForce a rebase even if the current branch is up-to-date and the command without --force would return without doing anything."
echo -e "\t"
echo -e "\tYou may find this (or --no-ff with an interactive rebase) helpful after reverting a topic branch merge, as this option recreates the topic branch with fresh commits so it can be remerged successfully without needing to "revert the reversion" (see the revert-a-faulty-merge How-To for details)."
echo -e "\t"
echo -e "\t--fork-point"
echo -e "\t--no-fork-point"
echo -e "\tUse reflog to find a better common ancestor between <upstream> and <branch> when calculating which commits have been introduced by <branch>."
echo -e "\t"
echo -e "\tWhen --fork-point is active, fork_point will be used instead of <upstream> to calculate the set of commits to rebase, where fork_point is the result of git merge-base --fork-point <upstream> <branch> command (see git-merge-base[1]). If fork_point ends up being empty, the <upstream> will be used as a fallback."
echo -e "\t"
echo -e "\tIf either <upstream> or --root is given on the command line, then the default is --no-fork-point, otherwise the default is --fork-point."
echo -e "\t"
echo -e "\t--ignore-whitespace"
echo -e "\t--whitespace=<option>"
echo -e "\tThese flag are passed to the git apply program (see git-apply[1]) that applies the patch. Incompatible with the --interactive option."
echo -e "\t"
echo -e "\t--committer-date-is-author-date"
echo -e "\t--ignore-date"
echo -e "\tThese flags are passed to git am to easily change the dates of the rebased commits (see git-am[1]). Incompatible with the --interactive option."
echo -e "\t"
echo -e "\t-i"
echo -e "\t--interactive"
echo -e "\tMake a list of the commits which are about to be rebased. Let the user edit that list before rebasing. This mode can also be used to split commits (see SPLITTING COMMITS below)."
echo -e "\t"
echo -e "\tThe commit list format can be changed by setting the configuration option rebase.instructionFormat. A customized instruction format will automatically have the long commit hash prepended to the format."
echo -e "\t"
echo -e "\t-p"
echo -e "\t--preserve-merges"
echo -e "\tRecreate merge commits instead of flattening the history by replaying commits a merge commit introduces. Merge conflict resolutions or manual amendments to merge commits are not preserved."
echo -e "\t"
echo -e "\tThis uses the --interactive machinery internally, but combining it with the --interactive option explicitly is generally not a good idea unless you know what you are doing (see BUGS below)."
echo -e "\t"
echo -e "\t-x <cmd>"
echo -e "\t--exec <cmd>"
echo -e "\tAppend "exec <cmd>" after each line creating a commit in the final history. <cmd> will be interpreted as one or more shell commands."
echo -e "\t"
echo -e "\tThis option can only be used with the --interactive option (see INTERACTIVE MODE below)."
echo -e "\t"
echo -e "\tYou may execute several commands by either using one instance of --exec with several commands:"
echo -e "\t"
echo -e "\tgit rebase -i --exec "cmd1 && cmd2 && ...""
echo -e "\tor by giving more than one --exec:"
echo -e "\t"
echo -e "\tgit rebase -i --exec "cmd1" --exec "cmd2" --exec ..."
echo -e "\tIf --autosquash is used, "exec" lines will not be appended for the intermediate commits, and will only appear at the end of each squash/fixup series."
echo -e "\t"
echo -e "\t--root"
echo -e "\tRebase all commits reachable from <branch>, instead of limiting them with an <upstream>. This allows you to rebase the root commit(s) on a branch. When used with --onto, it will skip changes already contained in <newbase> (instead of <upstream>) whereas without --onto it will operate on every change. When used together with both --onto and --preserve-merges, all root commits will be rewritten to have <newbase> as parent instead."
echo -e "\t"
echo -e "\t--autosquash"
echo -e "\t--no-autosquash"
echo -e "\tWhen the commit log message begins with "squash! …​" (or "fixup! …​"), and there is a commit whose title begins with the same …​, automatically modify the todo list of rebase -i so that the commit marked for squashing comes right after the commit to be modified, and change the action of the moved commit from pick to squash (or fixup). Ignores subsequent "fixup! " or "squash! " after the first, in case you referred to an earlier fixup/squash with git commit --fixup/--squash."
echo -e "\t"
echo -e "\tThis option is only valid when the --interactive option is used."
echo -e "\t"
echo -e "\tIf the --autosquash option is enabled by default using the configuration variable rebase.autoSquash, this option can be used to override and disable this setting."
echo -e "\t"
echo -e "\t--autostash"
echo -e "\t--no-autostash"
echo -e "\tAutomatically create a temporary stash before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts."
echo -e "\t"
echo -e "\t--no-ff"
echo -e "\tWith --interactive, cherry-pick all rebased commits instead of fast-forwarding over the unchanged ones. This ensures that the entire history of the rebased branch is composed of new commits."
echo -e "\t"
echo -e "\tWithout --interactive, this is a synonym for --force-rebase."
echo -e "\t"
echo -e "\tYou may find this helpful after reverting a topic branch merge, as this option recreates the topic branch with fresh commits so it can be remerged successfully without needing to "revert the reversion" (see the revert-a-faulty-merge How-To for details)."

echo "------------"

# the command's usage examples
# example 1
echo "git test"
echo description here

# example 2
echo "git test something"
echo description here


exit 0
