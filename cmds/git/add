#!/usr/bin/bash

bold=`tput bold`
underline=`tput smul`
stop_underline=`tput rmul`
reset=`tput sgr0`

echo "This is the git ${bold}add${reset} command."

# The command's name
echo -e 'git add'

# the command's description
echo "description here"

echo "------------"

# the command's syntax
echo "Syntax:"
echo "git add [OPTIONS]..."
echo -e "\t<pathspec>…​"
echo -e "\tFiles to add content from. Fileglobs (e.g. *.c) can be given to add all matching files. Also a leading directory name (e.g. dir to add dir/file1 and dir/file2) can be given to update the index to match the current state of the directory as a whole (e.g. specifying dir will record not just a file dir/file1 modified in the working tree, a file dir/file2 added to the working tree, but also a file dir/file3 removed from the working tree. Note that older versions of Git used to ignore removed files; use --no-all option if you want to add modified or new files but ignore removed ones."
echo -e "\t"
echo -e "\t-n"
echo -e "\t--dry-run"
echo -e "\tDon’t actually add the file(s), just show if they exist and/or will be ignored."
echo -e "\t"
echo -e "\t-v"
echo -e "\t--verbose"
echo -e "\tBe verbose."
echo -e "\t"
echo -e "\t-f"
echo -e "\t--force"
echo -e "\tAllow adding otherwise ignored files."
echo -e "\t"
echo -e "\t-i"
echo -e "\t--interactive"
echo -e "\tAdd modified contents in the working tree interactively to the index. Optional path arguments may be supplied to limit operation to a subset of the working tree. See “Interactive mode” for details."
echo -e "\t"
echo -e "\t-p"
echo -e "\t--patch"
echo -e "\tInteractively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index."
echo -e "\t"
echo -e "\tThis effectively runs add --interactive, but bypasses the initial command menu and directly jumps to the patch subcommand. See “Interactive mode” for details."
echo -e "\t"
echo -e "\t-e"
echo -e "\t--edit"
echo -e "\tOpen the diff vs. the index in an editor and let the user edit it. After the editor was closed, adjust the hunk headers and apply the patch to the index."
echo -e "\t"
echo -e "\tThe intent of this option is to pick and choose lines of the patch to apply, or even to modify the contents of lines to be staged. This can be quicker and more flexible than using the interactive hunk selector. However, it is easy to confuse oneself and create a patch that does not apply to the index. See EDITING PATCHES below."
echo -e "\t"
echo -e "\t-u"
echo -e "\t--update"
echo -e "\tUpdate the index just where it already has an entry matching <pathspec>. This removes as well as modifies index entries to match the working tree, but adds no new files."
echo -e "\t"
echo -e "\tIf no <pathspec> is given when -u option is used, all tracked files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories)."
echo -e "\t"
echo -e "\t-A"
echo -e "\t--all"
echo -e "\t--no-ignore-removal"
echo -e "\tUpdate the index not only where the working tree has a file matching <pathspec> but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree."
echo -e "\t"
echo -e "\tIf no <pathspec> is given when -A option is used, all files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories)."
echo -e "\t"
echo -e "\t--no-all"
echo -e "\t--ignore-removal"
echo -e "\tUpdate the index by adding new files that are unknown to the index and files modified in the working tree, but ignore files that have been removed from the working tree. This option is a no-op when no <pathspec> is used."
echo -e "\t"
echo -e "\tThis option is primarily to help users who are used to older versions of Git, whose "git add <pathspec>…​" was a synonym for "git add --no-all <pathspec>…​", i.e. ignored removed files."
echo -e "\t"
echo -e "\t-N"
echo -e "\t--intent-to-add"
echo -e "\tRecord only the fact that the path will be added later. An entry for the path is placed in the index with no content. This is useful for, among other things, showing the unstaged content of such files with git diff and committing them with git commit -a."
echo -e "\t"
echo -e "\t--refresh"
echo -e "\tDon’t add the file(s), but only refresh their stat() information in the index."
echo -e "\t"
echo -e "\t--ignore-errors"
echo -e "\tIf some files could not be added because of errors indexing them, do not abort the operation, but continue adding the others. The command shall still exit with non-zero status. The configuration variable add.ignoreErrors can be set to true to make this the default behaviour."
echo -e "\t"
echo -e "\t--ignore-missing"
echo -e "\tThis option can only be used together with --dry-run. By using this option the user can check if any of the given files would be ignored, no matter if they are already present in the work tree or not."
echo -e "\t"
echo -e "\t--"
echo -e "\tThis option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options)."


echo "------------"

# the command's usage examples
# example 1
echo "git test"
echo description here

# example 2
echo "git test something"
echo description here


exit 0
